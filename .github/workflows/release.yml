name: Release - 发布流程

# 当创建新的 tag 时触发 111
on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.3 等格式
      
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 创建 GitHub Release
  create-release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于生成变更日志

      # 2. 获取版本信息
      - name: 获取版本信息
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      # 3. 生成变更日志
      - name: 生成变更日志
        id: changelog
        run: |
          echo "## 🎉 版本 ${{ steps.version.outputs.version }} 发布说明" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### ✨ 主要更新" >> CHANGELOG.md
          echo "- 新功能和改进" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 🐛 问题修复" >> CHANGELOG.md
          echo "- Bug 修复" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📝 提交历史" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" -10 >> CHANGELOG.md

      # 4. 创建 Release
      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建并发布到 PyPI
  build-and-publish:
    name: 构建并发布包
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 设置 Python
      - name: 设置 Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 3. 安装依赖
      - name: 安装构建依赖
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # 4. 运行测试
      - name: 安装并运行测试
        run: |
          pip install -r requirements-dev.txt
          pip install -e .
          pytest tests/ -v

      # 5. 构建包
      - name: 构建包
        run: |
          python -m build
          ls -lh dist/

      # 6. 检查包
      - name: 检查包
        run: |
          twine check dist/*

      # 7. 上传到 artifacts
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: dist/

      # 8. 发布到 PyPI (取消注释以启用真实发布)
      # 需要在 GitHub Secrets 中设置 PYPI_API_TOKEN
      # - name: 发布到 PyPI
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      #   run: |
      #     twine upload dist/*

      # 模拟发布到 PyPI
      - name: 模拟发布到 PyPI
        run: |
          echo "📦 包已构建完成！"
          echo "📋 包内容："
          ls -lh dist/
          echo ""
          echo "✅ 在真实场景中，这里会将包上传到 PyPI"
          echo "💡 要启用真实发布，请："
          echo "   1. 在 PyPI 创建 API Token"
          echo "   2. 将 Token 添加到 GitHub Secrets (PYPI_API_TOKEN)"
          echo "   3. 取消上方 '发布到 PyPI' 步骤的注释"

  # 发布通知
  notify:
    name: 发布通知
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: always()

    steps:
      - name: 发布结果通知
        run: |
          if [ "${{ needs.build-and-publish.result }}" == "success" ]; then
            echo "✅ 发布成功！"
            echo "🎉 新版本已发布"
          else
            echo "❌ 发布失败"
            echo "请检查日志查看详细错误信息"
          fi
