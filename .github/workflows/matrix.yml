name: Matrix - 多环境测试

# 触发条件
on:
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一早上 8 点运行
    - cron: '0 8 * * 1'
  workflow_dispatch:

jobs:
  # 多 Python 版本和操作系统的矩阵测试
  test-matrix:
    name: 测试 Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      # 即使某个环境失败，继续测试其他环境
      fail-fast: false
      matrix:
        # 测试多个操作系统
        os: [ubuntu-latest, windows-latest, macos-latest]
        # 测试多个 Python 版本
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        # 可以排除特定组合
        exclude:
          - os: macos-latest
            python-version: '3.8'  # macOS 上不测试 Python 3.8

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 设置 Python
      - name: 设置 Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # 3. 显示 Python 信息
      - name: 显示 Python 信息
        run: |
          python --version
          pip --version

      # 4. 安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      # 5. 运行测试
      - name: 运行测试 (Python ${{ matrix.python-version }})
        run: |
          pytest tests/ -v --cov=calculator --cov-report=term

      # 6. 上传覆盖率到 Codecov (可选)
      # - name: 上传覆盖率到 Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage.xml
      #     flags: python-${{ matrix.python-version }}
      #     name: py${{ matrix.python-version }}-${{ matrix.os }}

  # 额外的环境测试：不同的依赖版本
  test-dependencies:
    name: 测试依赖兼容性
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        deps-version:
          - name: "最小版本"
            pytest: "pytest==7.4.0"
          - name: "最新版本"
            pytest: "pytest"

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装 ${{ matrix.deps-version.name }} 依赖
        run: |
          python -m pip install --upgrade pip
          pip install ${{ matrix.deps-version.pytest }}
          pip install pytest-cov
          pip install -e .

      - name: 运行测试
        run: |
          pytest tests/ -v

  # 测试结果汇总
  matrix-summary:
    name: 测试矩阵总结
    runs-on: ubuntu-latest
    needs: [test-matrix, test-dependencies]
    if: always()

    steps:
      - name: 检查测试结果
        run: |
          echo "## 📊 矩阵测试结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test-matrix.result }}" == "success" ] && [ "${{ needs.test-dependencies.result }}" == "success" ]; then
            echo "✅ **所有环境测试通过！**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 多版本 Python 测试：✅ 通过" >> $GITHUB_STEP_SUMMARY
            echo "- 依赖兼容性测试：✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **部分测试失败**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 多版本 Python 测试：${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- 依赖兼容性测试：${{ needs.test-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 显示测试环境信息
        run: |
          echo "### 🔧 测试环境" >> $GITHUB_STEP_SUMMARY
          echo "- 操作系统：Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "- Python 版本：3.8, 3.9, 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- 总测试场景：14 个" >> $GITHUB_STEP_SUMMARY
